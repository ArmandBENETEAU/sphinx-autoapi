

WrapperProviderContext Class
============================



.. contents:: 
   :local:



Summary
-------

The context used by an [Microsoft.AspNet.Mvc.Xml.IWrapperProvider](Microsoft.AspNet.Mvc.Xml.IWrapperProvider.yml) to wrap or un-wrap types.




Inheritance Hierarchy
---------------------
* :dn:cls:`System.Object`
* :dn:cls:`Microsoft.AspNet.Mvc.Xml.WrapperProviderContext`





Syntax
------

.. code-block:: csharp

   public class WrapperProviderContext



GitHub
------

`View on GitHub <https://github.com/aspnet/mvc/blob/master/src/Microsoft.AspNet.Mvc.Xml/WrapperProviderContext.cs>`_





.. dn:class:: Microsoft.AspNet.Mvc.Xml.WrapperProviderContext


Constructors
------------

.. dn:class:: Microsoft.AspNet.Mvc.Xml.WrapperProviderContext
    :noindex:
    :hidden:

    .. dn:constructor:: Microsoft.AspNet.Mvc.Xml.WrapperProviderContext.WrapperProviderContext(System.Type, System.Boolean)
    
        
    
        
        
    
        
        :param declaredType: The declared type of the object that needs to be wrapped.
        :type declaredType: System.Type
        :param isSerialization: <see langword="true" /> if the wrapper provider is invoked during
    serialization, otherwise
    <see langword="false" />.
        :type isSerialization: System.Boolean
    
        
        .. code-block:: csharp
    
           public WrapperProviderContext(Type declaredType, bool isSerialization)


Properties
----------

.. dn:class:: Microsoft.AspNet.Mvc.Xml.WrapperProviderContext
    :noindex:
    :hidden:

    .. dn:property:: Microsoft.AspNet.Mvc.Xml.WrapperProviderContext.DeclaredType
    
        
    
        
        
    
        
        :rtype: 
    
        
        .. code-block:: csharp
    
           public Type DeclaredType { get; }

    .. dn:property:: Microsoft.AspNet.Mvc.Xml.WrapperProviderContext.IsSerialization
    
        
    
        
        
    
        
        :rtype: 
    
        
        .. code-block:: csharp
    
           public bool IsSerialization { get; }

